// include the library code:
#include <LiquidCrystal.h>

const unsigned int TRIG_PIN = 10;
const unsigned int ECHO_PIN = 7;
const unsigned int BAUD_RATE = 9600;



// initialize the library by associating any needed LCD interface pin
// with the arduino pin number it is connected to
const int rs = 13, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

int dis() {	// Trả về khoảng cách đo được
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  const unsigned long duration = pulseIn(ECHO_PIN, HIGH);
  int distance = duration / 29 / 2;
  return distance;
}
void warning(int dis) {		// In ra Lcd khoảng cách hiện tại
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Distance:");
  lcd.setCursor(0, 1);
  lcd.print(dis);
  lcd.print(" cm(Warning)");
}
void music() {		// Nhạc em copy cho vào

  if (dis() > 15) {		// Nếu hơn 15cm thì thoát nhạc
    return;
  }
  warning(dis());		// In ra khoảng cách
  int melody[] = {262, 294, 330, 349, 392, 440, 494, 523, 587, 659, 698, 784, 880, 988};

  tone(8, melody[2], 500); delay(125);
  tone(8, melody[4], 500); delay(125);
  tone(8, melody[5], 500); delay(250);
  tone(8, melody[5], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[5], 500); delay(125);
  tone(8, melody[6], 500); delay(125);
  tone(8, melody[7], 500); delay(250);
  tone(8, melody[7], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[7], 500); delay(125);
  tone(8, melody[8], 500); delay(125);
  tone(8, melody[6], 500); delay(250);
  tone(8, melody[6], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[5], 500); delay(125);
  tone(8, melody[4], 500); delay(125);
  tone(8, melody[5], 500); delay(500);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[2], 500); delay(125);
  tone(8, melody[4], 500); delay(125);
  tone(8, melody[5], 500); delay(250);
  tone(8, melody[5], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[5], 500); delay(125);
  tone(8, melody[6], 500); delay(125);
  tone(8, melody[7], 500); delay(250);
  tone(8, melody[7], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[7], 500); delay(125);
  tone(8, melody[8], 500); delay(125);
  tone(8, melody[6], 500); delay(250);
  tone(8, melody[6], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[5], 500); delay(125);
  tone(8, melody[4], 500); delay(125);
  tone(8, melody[5], 500); delay(500);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[2], 500); delay(125);
  tone(8, melody[4], 500); delay(125);
  tone(8, melody[5], 500); delay(250);
  tone(8, melody[5], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[5], 500); delay(125);
  tone(8, melody[7], 500); delay(125);
  tone(8, melody[8], 500); delay(250);
  tone(8, melody[8], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[8], 500); delay(125);
  tone(8, melody[9], 500); delay(125);
  tone(8, melody[10], 500); delay(250);
  tone(8, melody[10], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[9], 500); delay(125);
  tone(8, melody[8], 500); delay(125);
  tone(8, melody[9], 500); delay(125);
  tone(8, melody[5], 500); delay(375);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[5], 500); delay(125);
  tone(8, melody[6], 500); delay(125);
  tone(8, melody[7], 500); delay(250);
  tone(8, melody[7], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[8], 500); delay(125);
  tone(8, melody[9], 500); delay(125);
  tone(8, melody[5], 500); delay(500);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[5], 500); delay(125);
  tone(8, melody[7], 500); delay(125);
  tone(8, melody[6], 500); delay(250);
  tone(8, melody[6], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[7], 500); delay(125);
  tone(8, melody[5], 500); delay(125);
  tone(8, melody[6], 500); delay(500);

  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[5], 500); delay(250);
  tone(8, melody[5], 500); delay(125);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[5], 500); delay(125);
  tone(8, melody[6], 500); delay(125);
  tone(8, melody[7], 500); delay(250);
  tone(8, melody[7], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[7], 500); delay(125);
  tone(8, melody[8], 500); delay(125);
  tone(8, melody[6], 500); delay(250);
  tone(8, melody[6], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[5], 500); delay(125);
  tone(8, melody[4], 500); delay(125);
  tone(8, melody[5], 500); delay(500);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[2], 500); delay(125);
  tone(8, melody[3], 500); delay(125);
  tone(8, melody[5], 500); delay(250);
  tone(8, melody[5], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[5], 500); delay(125);
  tone(8, melody[6], 500); delay(125);
  tone(8, melody[7], 500); delay(250);
  tone(8, melody[7], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[7], 500); delay(125);
  tone(8, melody[8], 500); delay(125);
  tone(8, melody[6], 500); delay(250);
  tone(8, melody[6], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[5], 500); delay(125);
  tone(8, melody[4], 500); delay(125);
  tone(8, melody[5], 500); delay(500);
  if (dis() > 15) {
    return;
  }
  warning(dis());

  tone(8, melody[2], 500); delay(125);
  tone(8, melody[4], 500); delay(125);
  tone(8, melody[5], 500); delay(250);
  tone(8, melody[5], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[5], 500); delay(125);
  tone(8, melody[6], 500); delay(125);
  tone(8, melody[8], 500); delay(250);
  tone(8, melody[8], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[8], 500); delay(125);
  tone(8, melody[9], 500); delay(125);
  tone(8, melody[10], 500); delay(250);
  tone(8, melody[10], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[9], 500); delay(125);
  tone(8, melody[8], 500); delay(125);
  tone(8, melody[9], 500); delay(125);
  tone(8, melody[5], 500); delay(375);

  if (dis() > 15) {
    return;
  }
  warning(dis());

  tone(8, melody[2], 500); delay(125);
  tone(8, melody[4], 500); delay(125);
  tone(8, melody[5], 500); delay(250);
  tone(8, melody[5], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[5], 500); delay(125);
  tone(8, melody[6], 500); delay(125);
  tone(8, melody[8], 500); delay(250);
  tone(8, melody[8], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[8], 500); delay(125);
  tone(8, melody[9], 500); delay(125);
  tone(8, melody[10], 500); delay(250);
  tone(8, melody[10], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[9], 500); delay(125);
  tone(8, melody[8], 500); delay(125);
  tone(8, melody[9], 500); delay(125);
  tone(8, melody[5], 500); delay(375);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[5], 500); delay(125);
  tone(8, melody[6], 500); delay(125);
  tone(8, melody[7], 500); delay(250);
  tone(8, melody[7], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[8], 500); delay(250);
  tone(8, melody[9], 500); delay(125);
  tone(8, melody[5], 500); delay(375);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[5], 500); delay(125);
  tone(8, melody[7], 500); delay(125);
  tone(8, melody[6], 500); delay(250);
  tone(8, melody[6], 500); delay(250);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[7], 500); delay(125);
  tone(8, melody[5], 500); delay(125);
  tone(8, melody[6], 500); delay(750);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[9], 500); delay(750);
  tone(8, melody[10], 500); delay(750);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[9], 500); delay(125);
  tone(8, melody[9], 500); delay(250);
  tone(8, melody[11], 500); delay(250);
  tone(8, melody[9], 500); delay(125);
  tone(8, melody[8], 500); delay(500);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[8], 500); delay(750);
  tone(8, melody[7], 500); delay(750);
  if (dis() > 15) {
    return;
  }
  warning(dis());
  tone(8, melody[6], 500); delay(125);
  tone(8, melody[7], 500); delay(250);
  tone(8, melody[6], 500); delay(250);
  tone(8, melody[5], 500); delay(500);
}


void setup() {
  // set up the LCD's number of columns and rows:
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  Serial.begin(BAUD_RATE);
  pinMode(A0, OUTPUT);
  pinMode(A1, OUTPUT);
  pinMode(A2, OUTPUT);
  lcd.begin(16, 2);
  lcd.clear();

}


void loop() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  const unsigned long duration = pulseIn(ECHO_PIN, HIGH);
  int distance = duration / 29 / 2;
  lcd.clear();
  if (duration == 0) {
    lcd.setCursor(0, 0);
    lcd.print("Warning");
  }
  else
  {
    if (distance > 30) {		// Em chỉ để khoảng 30 cho dễ demo
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Distance:");
      digitalWrite(A2, HIGH);
      digitalWrite(A1, LOW);
      digitalWrite(A0, LOW);
      lcd.setCursor(0, 1);
      lcd.print(distance);
      lcd.print(" cm(Safe)");
    } else if (distance <= 30 && distance >= 15 ) {
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Distance:");
      digitalWrite(A2, LOW);
      digitalWrite(A1, LOW);
      digitalWrite(A0, HIGH);
      lcd.setCursor(0, 1);
      lcd.print(distance);
      lcd.print(" cm(Risk)");
    } else {
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Distance:");
      digitalWrite(A2, LOW);
      digitalWrite(A1, HIGH);
      digitalWrite(A0, LOW);
      lcd.setCursor(0, 1);
      lcd.print(distance);
      lcd.print(" cm(Warning)");
      music();
    }

  }
  delay(500);

}
